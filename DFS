
Depth-first search refers to traversing a tree or a graph as deep as possible along each branch before backtracking. [Problem] Each circled number represents a vertex. Each line connecting the vertices denotes an edge. For given start and destination vertices, print the shortest distance between them when traversing with DFS algorithm. [Input] The first input line contains the number of test case, T. The next line contains the number of vertices, the number of edges, starting point, and destination point. Then, the information of vertices will be listed. For Instance, 1 2 means that one can move from 1 to 2. There can be max 30 vertices. The length of an edge is 1. [Output] For each given test case, print the shortest distance. Print -1, if itâ€™s unreachable. 



Input

Output



2 // number of test cases 8 10 1 8// number of vertices, number of edges, Starting Point, Destination point 1 2 // 1 2 means one can move from 1 to 2 1 3 2 7 2 4 3 5 3 6 4 7 5 7 6 7 6 8 8 10 2 8 1 2 1 3 2 7 2 4 3 5 3 6 4 7 5 7 6 7 6 8 
 
#1 3 // length of shortest path #2 -1  
import java.util.Scanner;

class Solution
{
	static final int MAX_VERTEX = 30;
	static int[][] map = new int[MAX_VERTEX][MAX_VERTEX];
	static boolean[] visit = new boolean[MAX_VERTEX];
	static int vertex;
	static int edge;
	static int maxEdge;
	static int start;
	static int end;
	
	public static void depthFirstSearch(int v, int depth)
	{
		if (v == end)
		{
			if (maxEdge < 0 || depth < maxEdge)
			{
				maxEdge = depth;
			}
			return;
		}
		visit[v] = true;
		for (int i = 1; i <= vertex; i++) 
		{
			if (map[v][i] == 1 && !visit[i]) 
			{
				depthFirstSearch(i, depth + 1);
				visit[i] = false;
			}
		}		
	}
	
	
	public static void main(String args[]) throws Exception
	{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int test_case = 1; test_case <= T; test_case++)
		{
			vertex = sc.nextInt();
			edge = sc.nextInt();
			start = sc.nextInt();
			end = sc.nextInt();
			for (int i = 0; i < edge; i++)
			{
				int v1 = sc.nextInt();
				int v2 = sc.nextInt();
				map[v1][v2] = 1;
			}
			maxEdge = -1;
			depthFirstSearch(start, 0);
			System.out.printf("#%d %d\n", test_case, maxEdge);
		}
		sc.close();
	}
}
