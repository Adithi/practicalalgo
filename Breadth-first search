Breadth-first search traverses a tree or a graph as wide as possible along each level. [Problem] Each circled number is called a vertex. Each line connecting vertices is called an edge. The maximum number of vertices is 30. When the information of the edges is given as adjacent matrices, traverse with BFS and print the numbers of the vertices in the visited order. [Input] The first input line contains the number of test cases, T. The next line contains the number of vertices and the starting vertex. Then, the edge info will be listed. For Instance, 1 2 means that one can move from 1 to 2. There can be max 30 vertices. [Output] For each given test case, print the visited vertices. 
import java.util.Scanner;

class Solution {

	static final int MAX_VERTEX = 30;

	static int num;
	static int map[][];
	static int visit[];
	static int queue[];
	static int rear, front;

	static void breadthFirstSearch(int vertex)
	{
		visit[vertex] = 1; 
		System.out.print(vertex + " ");
		queue[rear++] = vertex;
		while (front < rear)
		{
			vertex = queue[front++];
			for (int i = 1; i <= num; i++)
			{
				if (map[vertex][i] == 1 && visit[i] == 0)
				{
					visit[i] = 1;
					System.out.printf("%d ", i);
					queue[rear++] = i;
				}
			}
		}
	}

	public static void main(String args[]) throws Exception {
		Scanner sc = new Scanner(System.in);
		
		int T = sc.nextInt();

		for (int test_case = 1; test_case <= T; test_case++)
		{
			map = new int[MAX_VERTEX][MAX_VERTEX];
			visit = new int[MAX_VERTEX];
			queue = new int[MAX_VERTEX];
			
			num = sc.nextInt();
			int start = sc.nextInt();

			while (true)
			{
				int v1 = sc.nextInt();
				int v2 = sc.nextInt();
				if (v1 == -1 && v2 == -1)
				{
					break;
				}
				map[v1][v2] = map[v2][v1] = 1;
			}

			System.out.printf("#%d ", test_case);
			breadthFirstSearch(start);
			System.out.printf("\n");
		}
		
		sc.close();
	}
}
