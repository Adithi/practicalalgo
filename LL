
Linked list is a linear collection of data elements pointing to the next node by means of a pointer. It is a data structure consisting of a group of nodes which together represent a sequence. [Problem] Insert the given N integers to a linked list. Print the remainder after 1. removing the first number pointed 2. removing next->next recursively 1 // remove the first number pointed 2 3 4 5 2 // pointer moved to 2, remove next->next 4 3 4 5 2 3 5 // pointer moved to 5, remove next->next 3 2 5 // pointer moved to 5, remove next->next 5 2 // remainder [Input] The first input line contains the number of test cases, T. The second line contains the number of input, N (2 <= N <= 100). On the next line, N data will be given. [Output] For each given test case, print the remainder 



Input

Output



2 //number of Test cases 5 //Input 1 2 3 4 5 //Input Data 6 1 2 3 4 5 6 
 
#1 2 #2 5 
import java.util.Scanner;


class ListNode {
	int data;
	ListNode prev;
	ListNode next;
	
	public ListNode()
	{
		data = 0;
		prev = this;
		next = this;
	}

	public static ListNode appendListNode(ListNode head, int data)
	{
		ListNode node = new ListNode();
		node.data = data;
		if (head == null)
		{
			head = node;
		}
		else 
		{
			ListNode last = head.prev;
			last.next = node;
			head.prev = node;
			node.prev = last;
			node.next = head;
		}
		return head;
	}
	
	public static ListNode removeListNode(ListNode head, ListNode node)
	{
		if (head == head.next)
		{
			return null;
		}
		else 
		{
			ListNode prevNode = node.prev;
			ListNode nextNode = node.next;
			prevNode.next = nextNode;
			nextNode.prev = prevNode;
			return (head == node) ? nextNode : head;
		}
		
	}
}
	

class Solution
{
	public static void main(String args[]) throws Exception
	{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int test_case = 1; test_case <= T; test_case++)
		{
			ListNode head = null;
			int N = sc.nextInt();
			for (int i = 0; i < N; i++)
			{
				int data = sc.nextInt();
				head = ListNode.appendListNode(head, data);
			}
			ListNode node = head;
			while(head != head.next)
			{
				ListNode nextNode = node.next;
				head = ListNode.removeListNode(head, node);
				node = nextNode.next.next;
			}
			System.out.printf("#%d %d\n", test_case, head.data);
		}
		sc.close();
	}
}
