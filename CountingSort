/**
 * Counting sort counts each distinct key value and determines the position of each key by counts. 
 * [Problem] 
 * Count sort the given input in ascending order. Max number of data is 100. 
 * Given integers might be overlapped. 
 * [Input] 
 * The first input line contains the number of test cases, T. 
 * The next line contains the number of input data. 
 * Then, the integer data will be listed 
 * [Output] 
 * For each given test case, print the sorted list. 
 * @author kayethi
 *
 */
public class CountingSort {

		static final int MAX_N = 100;
		static final int MAX_DIGIT = 10;

		static int N;  // # of data set
		static int arr[];
		static int cnt[] = new int[MAX_DIGIT];
		static int sortedArr[];

		static void calculateDigitNumber()
		{
			for (int i = 0; i < N; i++)
			{
				cnt[arr[i]]++;
			}

			for (int i = 1; i < MAX_DIGIT; i++)
			{
				cnt[i] = cnt[i-1] + cnt[i];
			}
		}

		static void executeCountingSort()
		{
			for (int i = N-1; i >= 0; i--)
			{
				sortedArr[--cnt[arr[i]]] = arr[i];
			}
		}

		public static void main(String arg[]) throws Exception
		{
			Scanner sc = new Scanner(System.in);
			
			int T = sc.nextInt();

			for (int test_case = 1; test_case <= T; test_case++) 
			{
				N = sc.nextInt();
				
				arr = new int[N];
				sortedArr = new int[N];

				for (int i = 0; i < N; i++)
				{
					arr[i] = sc.nextInt();
				}

				// initialize
				for (int i = 1; i < MAX_DIGIT; i++)
				{
					cnt[i] = 0;
				}

				calculateDigitNumber();
				executeCountingSort();

				//print the sorted digits
				System.out.print("#" + test_case + " ");
				for (int i = 0; i < N; i++) 
				{
					System.out.print(sortedArr[i] + " ");
				}
				System.out.println();
			}
			
			sc.close();
		}
	
}
