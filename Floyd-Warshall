
Floyd-Warshall algorithm finds the shortest paths in a weighted graph with either positive or negative edge weights. [Problem] A directed graph with N vertices and consisting of M edges with a weight of w is given. For instance, Figure 1 demonstrates a directed graph. where N=5 and M=10. For every pair of vertices (A, B), find the shortest path from A to B. [Input] The first input line contains the number of test cases, T. The next line contains the number of vertices, N. The third line contains the number of edges, M. Next, the connected vertices and the weight will be listed. [Output] For each given test case, print the shortest path for every pair of vertices (A, B) from A to B. 


Figure 1. Input Data: Directed Graph



Input

Output



1 // # of test cases 5 // Number of vertices N (1 <= N <= 100) 10 // Number of edges M (1 <= M <= 10,000) 1 2 2 // Move from vertex 1 to vertex 2, edge with weight 2 // (1 <= w <= 100) 1 3 3 2 1 1 3 1 8 3 4 5 4 1 6 4 2 1 4 5 10 5 2 2 5 4 8 
 
#1 0 2 3 8 18 1 0 4 9 19 7 6 0 5 15 2 1 5 0 10 3 2 6 8 0 
import java.util.Scanner;

class Solution
{
	
	static final int INFINITY = 999999;
	static int[][] weight = new int[101][101];
	static int[][] result = new int[101][101];

	public static void floyd(int n) 
	{
		for (int k = 0; k < n; k++) 
		{
			for (int i = 0; i < n; i++) 
			{
				if (k == 0) 
				{
					for (int j = 0; j < n; j++) 
					{
						result[i][j] = weight[i][j];
					}
				}
				for (int j = 0; j < n; j++) 
				{
					if (result[i][k] + result[k][j] < result[i][j])
					{
						result[i][j] = result[i][k] + result[k][j];
					}
				}
			}
		}
	}

	
	public static void main(String args[]) throws Exception
	{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int test_case = 1; test_case <= T; test_case++)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			
			for (int i = 0; i < n; i++) 
			{
				for (int j = 0; j < n; j++) 
				{
					weight[i][j] = INFINITY;
				}
				weight[i][i] = 0;
			}

			for (int i = 0; i < m; i++) 
			{
				int st = sc.nextInt();
				int en = sc.nextInt();
				int w = sc.nextInt();
				if (weight[st-1][en-1] > w)
				{
					weight[st-1][en-1] = w;
				}
			}
			
			floyd(n);

			System.out.printf("#%d\n", test_case);
			for (int i = 0; i < n; i++) 
			{
				for (int j = 0; j < n; j++) 
				{
					System.out.printf("%d ", result[i][j]);
				}
				System.out.printf("\n");
			}

		}
		sc.close();
	}
}
