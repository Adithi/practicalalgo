
Permutation combination re-arranges members of a set and selects a subset. [Problem] For a given string str (with a length of n), print the 2 below one after another: 1. Print the number of all possibilities to array n characters of str in a row. 2. Print all possible subsets by selecting K characters from the given string str (constraint: string does not contain identical alphabetic letters, K <= N <= 10) [Input] The first input line contains the number of test cases, T. The next line contains the string. The third line contains string length, N and the next line contains K. [Output] For each given test case, print 1. and 2. from the problem description 



Input

Output



1 // # of test cases ABCD 3 // n 2 // k
 
#1 ABC ACB BAC BCA CBA CAB AB AC BC 
import java.util.Scanner;

class Solution
{
	static final int MAX_STRING_LENGTH = 10;
	static int stackTop = 0;
	static char[] combinationStack = new char[MAX_STRING_LENGTH];
	
	static void printCString(char[] str)
	{
		for (int i = 0; i < str.length && str[i] != 0; i++)
		{
			System.out.print(str[i]);
		}
		System.out.print("\n");
	}

	static void swap(char[] str, int x, int y)
	{
		char temp = str[x];
		str[x] = str[y];
		str[y] = temp;
	}

	static void permutation(char[] str, int l, int r)
	{
		if (l == r)
		{
			printCString(str);
		}
		else 
		{
			for (int i = l; i <= r; i++) 
			{
				swap(str, l, i);
				permutation(str, l+1, r);
				swap(str, l, i); //backtrack
			}
		}
	}

	static void push(char ch) 
	{
		combinationStack[stackTop++] = ch;
		combinationStack[stackTop] = '\0';
	}

	static void pop() 
	{
		combinationStack[--stackTop] = '\0';
	}

	static void combination(char[] str, int length, int offset, int k) 
	{
		
		if (k == 0) 
		{
			printCString(combinationStack);
			return;
		}
		for (int i = offset; i <= length - k; ++i) 
		{
			push(str[i]);
			combination(str, length, i+1, k-1);
			pop();
		}
	}
	
	
	public static void main(String args[]) throws Exception
	{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for (int test_case = 1; test_case <= T; test_case++)
		{
			String input = sc.next();
			int N = sc.nextInt();
			int K = sc.nextInt();
			char[] str = input.toCharArray();
			
			System.out.printf("#%d\n", test_case);
			str[N] = 0;
			permutation(str, 0, N-1);
			combination(str, N, 0, K);
		}
		sc.close();
	}
}
