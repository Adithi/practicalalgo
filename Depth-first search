Depth-first search traverses a tree or a graph as deep as possible along each branch before backtracking. [Problem] Each circled number represents a vertex. Each line connecting vertices denotes an edge. When the information of the edges is given as adjacent matrix, traverse with DFS and print the vertex numbers in visited order. [Input] The first input line contains the number of test cases, T. The next line contains the number of vertices and the starting vertex. Then, the information of the edges will be listed. For Instance, 1 2 means one can move from 1 to 2. There can be max 30 vertices. [Output] For each given test case, print the visited vertices. 
import java.util.Scanner;

class Solution {

	static final int MAX_VERTEX = 30;

	static int vertex;
	static int map[][] = new int[MAX_VERTEX][MAX_VERTEX];
	static int visit[] = new int[MAX_VERTEX];

	static void depthFirstSearch(int v)
	{
		visit[v] = 1;
		for (int i = 1; i <= vertex; i++)
		{
			if (map[v][i] == 1 && visit[i] == 0)
			{
				System.out.printf("%d ", i);
				depthFirstSearch(i);
			}
		}
	}

	public static void main(String args[]) throws Exception {
		Scanner sc = new Scanner(System.in);
		
		int T = sc.nextInt();

		for (int test_case = 1; test_case <= T; test_case++)
		{
			vertex = sc.nextInt();
			int start = sc.nextInt();

			map = new int[MAX_VERTEX][MAX_VERTEX];
			visit = new int[MAX_VERTEX];
			
			while (true)
			{
				int v1 = sc.nextInt();
				int v2 = sc.nextInt();
				if (v1 == -1 && v2 == -1)
				{
					break;
				}
				map[v1][v2] = map[v2][v1] = 1;
			}
			System.out.printf("#%d ", test_case);
			System.out.printf("%d ", start);
			depthFirstSearch(start);
			System.out.printf("\n");
		}

		sc.close();
	}
}
