
Parametric search transforms decision algorithm into an optimization problem. It first sets an unknown-random-optimal solution value as its input parameter, and then simulates the decision algorithm recursively until it reaches the optimal solution. [Problem] You have K ribbons with various lengths. To use them as crafting material, you need to trim those to N ribbons with each the same length. Your program must determine the maximum length of each of the N ribbons (K <= N) Assumptions: - no loss when cut - impossible case won't be given – already cut ribbon can’t be attached- cut ribbon by integer (unit: cm) [Input] The first input line contains the number of test cases, T. The next line contains number of given ribbons, K (1<= K <= 10,000). Then, the number of required ribbons, N (1 <= N <= 1,000,000). For the following K lines, the length of each ribbon will be given. [Output] For each given test case, print the maximum possible length of N ribbons. 



Input

Output



1 // number of test cases 4 // number of given ribbons K 11 // the number of required ribbons N 802 743 457 539
 
#1 200 

import java.util.Scanner;

class Solution {

	static int K;
	static int N;
	static int low, high, mid, numRibbonTape, max;
	static int sizeRibbonTape[];

	static void search()
	{
		mid = low + (high - low) / 2;
		numRibbonTape = 0;

		for (int i = 0; i < K ; i++) 
		{
			numRibbonTape += (sizeRibbonTape[i] / mid);
		}

		if (numRibbonTape >= N)
		{
			low = mid + 1;
			if (max < mid)
				max = mid;
		}
		else
		{
			high = mid - 1;
		}
	}

	public static void main(String arg[]) throws Exception {
		Scanner sc = new Scanner(System.in);
		
		int T = sc.nextInt();

		for (int test_case = 1; test_case <= T; test_case++) 
		{
			low = 1;
			high = 0 ;
			max = -1;

			K = sc.nextInt();
			N = sc.nextInt();

			sizeRibbonTape = new int[K];
			for (int i = 0; i < K; i++)
			{
				sizeRibbonTape[i] = sc.nextInt();
				if ( high < sizeRibbonTape[i] )
				{
					high = sizeRibbonTape[i] ;
				}
			}

			while (low <= high)
			{
				search();
			}
			System.out.println("#" + test_case + " " + max);
		}
		
		sc.close();
	}
}
